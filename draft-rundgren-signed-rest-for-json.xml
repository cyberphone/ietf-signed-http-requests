<?xml version="1.0" encoding="us-ascii"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="std" docName="draft-rundgren-signed-rest-for-json-00" ipr="trust200902">
  <front>
    <title abbrev="draft-rundgren-signed-rest-for-json">
      Signed REST for JSON (SIGREST)
    </title>

    <author fullname="Anders Rundgren" initials="A." surname="Rundgren">
      <organization>Independent</organization>
      <address>
        <postal>
          <street></street>
          <code></code>
          <city>Montpellier</city>
          <country>France</country>
        </postal>
        <email>anders.rundgren.net@gmail.com</email>
        <uri>https://www.linkedin.com/in/andersrundgren/</uri>
      </address>
    </author>

    <date year="2019" />

    <area>Security</area>

    <workgroup></workgroup>

    <keyword>
      HTTP, JSON, Canonicalization, Signatures
    </keyword>

    <abstract>
      <t>
        This specification describes how JCS <xref target="JCS"/>
        combined with JWS <xref target="RFC7515"/>,
        can be utilized to support HTTP <xref target="RFC7231"/> based REST <xref target="REST"/> applications
        needing digitally signed requests.
        The described scheme is tailored for Web applications
        using JSON <xref target="RFC8259"/> as message format.
        In addition, there is a specific variant for requests that
        do not have a HTTP body like GET.
      </t>
      <t>
        The intended audiences of this document are Web tool vendors, as
        well as designers of secure Web applications.
      </t>
    </abstract>
  </front>

  <middle>
    <section anchor="Introduction" title="Introduction">
      <t>
        Currently there is no standard for digitally signing REST <xref target="REST"/>
        requests.  This has lead to the development of several proprietary solutions (see <xref target="other.solutions"/>)
        typically building on using HTTP header data for holding security constructs,
        while JSON request data is provided in clear in the HTTP body.
      </t>
      <t>
        This specification is intended to provide a standardized alternative that
        fully honors the REST concept without (directly) using HTTP headers for holding
        security constructs.  That is, JSON message data is supposed to also hold
        the security portion of a message.  This arrangement has the following characteristics:
        <list style="symbols">
          <t>
            Since REST requests (as a minimum) also are defined by an HTTP URI and a HTTP Verb
            these attributes are added as reserved JSON properties to signed request data.
          </t>
          <t>
            Due to the fact that messages compliant with this specification constitute of self-contained JSON objects,
            they may be serialized in databases or be embedded in other JSON objects.  The latter includes
            supporting counter signatures.
          </t>
          <t>
            The use of canonicalization provided by JCS makes signatures remain valid
            also after being processed by arbitrary JSON compliant tools.
          </t>
          <t>
            JWS is used in detached mode without modifications or extensions. 
          </t>
          <t>
            For general interoperability concerns as well as due to the relyiance on JCS,
            JSON message data is limitied to the I&nbhy;JSON <xref target="RFC7493"/> subset. 
          </t>
        </list>
        The above applies to REST requests using the HTTP methods POST, PUT or PATCH described in <xref target="rest.operation.withbody"/>.
      </t>
      <t>
        For REST requests using the HTTP methods GET or DELETE, another entirely URI <xref target="RFC3986"/> based
        scheme is described in <xref target="rest.operation.urionly"/>.
    </t>
    </section>

    <section anchor="Terminology" title="Terminology">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
        NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
        "MAY", and "OPTIONAL" in this document are to be interpreted as
        described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
        when, and only when, they appear in all capitals, as shown here.
      </t>
    </section>

    <section anchor="rest.operation.withbody" title="Methods: POST, PUT and PATCH">
      <t>
        Assume you have an unsigned HTTP request like the following:
      </t>
      <t>
        <figure align="center"><artwork><![CDATA[  POST /transact/pay HTTP/1.1
  Host: example.com
  Content-Type: application/json
  Content-Length: 1234

  {
    "something": "data",

         Additional application specific properties

  }]]></artwork></figure>
      </t>
      <t>
        Adding a signature to this request would require the following enhancements to the JSON payload:
      </t>
      <t>
        <figure align="center"><artwork><![CDATA[  {
    "@rest.uri": "https://example.com/transact/pay",
    "@rest.verb": "POST",
    "something": "data",

         Additional application specific properties

    "@rest.signature": "eyJhbGciOiJIUzI1NiJ9..VHVItCBCb849imarDtjw4"
  }]]></artwork></figure>
      </t>
      <t>
        Notes:
        <list style="symbols">
          <t>
            The argument to "@rest.signature" (a detached JWS) was truncated for brevity.
          </t>
          <t>
            This specification presumes that JSON data ("payload") is expressed
            through a top level JSON Object.
          </t>
        </list>
      </t>
      <t>
        The following subsections detail the operation for requests having an HTTP body.
      </t>
      <section anchor="rest.creation.withbody" title="Request Creation">
        <t>
          For compliance with this specification the following properties MUST be
          be added to the JSON Object to be signed:
        </t>
        <t>
          <list style="hanging">
            <t hangText="@rest.uri">&nbsp;
              <vspace blankLines="0"/>
              REQUIRED property holding the complete target URI.
            </t>
            <t hangText="@rest.verb">&nbsp;
              <vspace blankLines="0"/>
              REQUIRED property holding the HTTP method in uppercase.
            </t>
            <t hangText="@rest.headers">&nbsp;
              <vspace blankLines="0"/>
              OPTIONAL property holding a JSON object with HTTP headers
              related to the message.
              For more information see <xref target="signed.headers"/>.
            </t>
            <t hangText="@rest.signature">&nbsp;
              <vspace blankLines="0"/>
              REQUIRED property holding a detached JWS signature calculated over the rest of the JSON payload
              using the method described in <xref target="JWSJCS"/>.
              Note that this property MUST be created and added after all other properties have
              been inserted in the JSON Object.
            </t>
          </list>
          Since these property names are reserved they MUST NOT be used for other purposes
          in applications whishing to use this specification.
        </t>
      </section>
      <section anchor="rest.validation.withbody" title="Request Validation">
        <t>
          In addition to normal validation of received data, the following steps MUST also be performed:
          <list style="symbols">
            <t>
              The arguments to "@rest.uri" and "@rest.verb" MUST be checked for correctness
              which usually only can be done by the service processing the request.
              If there is a mismatch the service MUST reject the request with an
              HTTP code 400 (malformed request).
            </t>
            <t>
              The processing of the optional "@rest.headers" element is described in <xref target="signed.headers"/>.
            </t>
            <t>
              The signature provided in "@rest.signature" MUST be validated as described in <xref target="JWSJCS"/>.
            </t>
          </list>
        </t>
      </section>
    </section>
    <section anchor="rest.operation.urionly" title="Methods: GET and DELETE">
      <t>
        Assume you have an unsigned HTTP request like the following:
      </t>
      <t>
        <figure align="center"><artwork><![CDATA[  GET /lookup?user=435 HTTP/1.1
  Host: example.com]]></artwork></figure>
      </t>
      <t>
        Adding a signature to this request would require the following enhancements to the URI:
      </t>
      <t>
        <figure align="center"><artwork><![CDATA[  GET /lookup?user=435&@rest.signature=eyJhiJ..VHVIt HTTP/1.1
  Host: example.com]]></artwork></figure>
      </t>
      <t>
        Notes:
        <list style="symbols">
          <t>
            The argument to "@rest.signature" (a detached JWS) was truncated for brevity.
          </t>
          <t>
            This specification presumes that JSON data ("payload") is expressed
            through a top level JSON Object.
          </t>
        </list>
      </t>
      <t>
        The following subsections detail the operation for requests having an HTTP body.
      </t>
      <section anchor="rest.creation.urionly" title="Request Creation">
        <t>
          For compliance with this specification the following properties MUST be
          be added to the JSON Object to be signed:
        </t>
        <t>
          <list style="hanging">
            <t hangText="@rest.headers">&nbsp;
              <vspace blankLines="0"/>
              OPTIONAL property holding a JSON object with HTTP headers
              related to the message.
              For more information see <xref target="signed.headers"/>.
            </t>
            <t hangText="@rest.signature">&nbsp;
              <vspace blankLines="0"/>
              REQUIRED property holding a detached JWS signature calculated over the rest of the JSON payload
              using the method described in <xref target="JWSJCS"/>.
              Note that this property MUST be created and added after all other properties have
              been inserted in the JSON Object.
            </t>
          </list>
          Since these property names are reserved they MUST NOT be used for other purposes
          in applications whishing to use this specification.
        </t>
      </section>
      <section anchor="rest.validation.urionly" title="Request Validation">
        <t>
          In addition to normal validation of received data, the following steps MUST also be performed:
          <list style="symbols">
            <t>
              The arguments to "@rest.uri" and "@rest.verb" MUST be checked for correctness
              which usually only can be done by the service processing the request.
              If there is a mismatch the service MUST reject the request with an
              HTTP code 400 (malformed request).
            </t>
            <t>
              The processing of the optional "@rest.headers" element is described in <xref target="signed.headers"/>.
            </t>
            <t>
              The signature provided in "@rest.signature" MUST be validated as described in <xref target="JWSJCS"/>.
            </t>
          </list>
        </t>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>
        This document has no IANA actions.
      </t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>
        Systems implementing this application note are subject
        to the same security considerations as JCS and JWS.
      </t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>
        TBD.
      </t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.2119'?>
      <?rfc include='reference.RFC.3986'?>
      <?rfc include='reference.RFC.8259'?>
      <?rfc include='reference.RFC.7515'?>
      <?rfc include='reference.RFC.8174'?>
      <?rfc include='reference.RFC.7493'?>
      <?rfc include='reference.RFC.7231'?>
      <reference anchor="JCS" target="https://tools.ietf.org/html/draft-rundgren-json-canonicalization-scheme-05">
        <front>
          <title>JSON Canonicalization Scheme - Work in progress</title>
          <author>
            <organization>A. Rundgren, B. Jordan, S. Erdtman</organization>
          </author>
          <date/>
        </front>
      </reference>
      <reference anchor="JWSJCS" target="https://tools.ietf.org/html/draft-rundgren-jws-jcs-signature-scheme-00">
        <front>
          <title>Combined JWS and JCS Signature Scheme - Work in progress</title>
          <author>
            <organization>A. Rundgren</organization>
          </author>
          <date/>
        </front>
      </reference>
    </references>
    <references title="Informal References">
      <?rfc include='reference.RFC.4648'?>
      <reference anchor="REST" target="http://roy.gbiv.com/pubs/dissertation/top.htm">
        <front>
          <title>Architectural Styles and the Design of Network-based Software Architectures</title>
          <author>
            <organization>Roy Fielding</organization>
          </author>
          <date/>
        </front>
      </reference>
    </references>
    <section anchor="signed.headers" title="Optional Headers">
      <t>
        Systems implementing this application note are subject
        to the same security considerations as JCS and JWS.
      </t>
    </section>
    <section anchor="other.solutions" title="Other Signed REST Solutions">
      <t>
        Systems implementing this application note are subject
        to the same security considerations as JCS and JWS.
      </t>
    </section>
  </back>
</rfc>
